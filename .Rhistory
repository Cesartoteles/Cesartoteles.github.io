distill::create_post("Fiestas Patrias")
data_municipal <- readRDS("~/GitHub/data_municipal.rds")
library(tidyverse)
library(sjmisc)
library(ggcorrplot) # Matriz de correlación
library(psych) # Análisis factorial
library(mice) # Imputación de datos
library(VIM) # Ver los datos perdidos de nuestra base de datos
library(factoextra)
library(FactoMineR)
df <- readRDS("ENDH 2020 - Base de datos.rds")
df_ddhh <- df %>% select(I_1_p20:I_6_p20)
ggcorrplot(cor(df_ddhh))
pca_1 <- PCA(df_ddhh, graph = F) #Sin gráfico = F
pca_1
get_eig(pca_1)
fviz_pca_var(pca_1, col.var = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
fviz_pca_var(pca_1, col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE
)
data_pca <- pca_1$ind$coord%>%
as_tibble() %>%
mutate(primera_dimension =
(Dim.1 * 0.62 + Dim.1 * 0.6 + Dim.1 * 0.7 + Dim.1 * 0.5 + Dim.1 * 0.53 + Dim.1 * 0.68) / 37.624549,
segunda_dimension =
(Dim.2 * (-0.1) + Dim.2 * 0.01 + Dim.2 * (-0.32) + Dim.2 * 0.77 + Dim.2 * 0.2 + Dim.2 * (-0.3) ) /14.250996) %>%
mutate(pca_01 = (primera_dimension * 37.624549 + segunda_dimension * 14.250996) / 51.87554,
pca_02 = (Dim.1 * 37.624549 + Dim.2 * 14.250996) / 51.87554) %>%
mutate(indice_pd = GGally::rescale01(primera_dimension)*100,
indice_sd = GGally::rescale01(segunda_dimension)*100) %>%
mutate(indice_01 = GGally::rescale01(pca_01)*100,
indice_02 = GGally::rescale01(pca_01)*100)
df_endh <- read_rds("data/ENDH 2020 - Base de datos.rds")
df_endh <- read_rds("data/ENDH 2020 - Base de datos.rds")
sjPlot::view_df(df_endh, show.prc = T)
df_endh <- read_rds("ENDH 2020 - Base de datos.rds")
sjPlot::view_df(df_endh, show.prc = T)
df_estallido <- df_endh %>%
select(p34, p35, p36_O1, I_1_p37:I_5_p37, I_1_p38:I_6_p38) %>%
mutate_all(~as.integer(.))
df_estallido <- df_endh %>%
select(p34, p35, p36_O1, I_1_p37:I_5_p37, I_1_p38:I_6_p38) %>%
mutate_all(~as.integer(.))
ggcorrplot(cor(df_estallido))
md.pattern(df_estallido)
aggr_plot <- aggr(df_estallido)
pa <- fa(r = df_estallido, # Puede ser una base de datos o una matriz de datos.
nfactors = 3,
rotate = "varimax", # Suele ser la más utilizada
fm = "pa",
residuals = T)
pa
ml <- fa(r = df_estallido, # Puede ser una base de datos o una matriz de datos.
nfactors = 3,
rotate = "varimax", # Suele ser la más utilizada
fm = "ml",
residuals = T)
ml
fa <-  factanal(x        = na.omit(df_estallido),
factors  = 3,
rotation = "varimax",
scores   = "regression")
fa
fa.diagram(ml)
